{
  "address": "0x3608e89b60b73BA4DB083c737384A56dbBAe09C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_fundsReciever",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cbe43de70c51cc2834d74020ffd397cf6f3e7fd75b45f4e8344265b285ad156",
  "receipt": {
    "to": null,
    "from": "0x4EE7201DaD75B24DA5bB6A4483c15cb12C806252",
    "contractAddress": "0x3608e89b60b73BA4DB083c737384A56dbBAe09C2",
    "transactionIndex": 17,
    "gasUsed": "3442865",
    "logsBloom": "0x
    "blockHash": "0x6b9829918be5e8f6fd4ca60bc26f40f03773e80a7831afdaccb4d174cc9377e2",
    "transactionHash": "0x9cbe43de70c51cc2834d74020ffd397cf6f3e7fd75b45f4e8344265b285ad156",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 9678340,
        "transactionHash": "0x9cbe43de70c51cc2834d74020ffd397cf6f3e7fd75b45f4e8344265b285ad156",
        "address": "0x3608e89b60b73BA4DB083c737384A56dbBAe09C2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ee7201dad75b24da5bb6a4483c15cb12c806252"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x6b9829918be5e8f6fd4ca60bc26f40f03773e80a7831afdaccb4d174cc9377e2"
      }
    ],
    "blockNumber": 9678340,
    "cumulativeGasUsed": "4859119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "nfuse",
    "NFSE",
    "0x4EE7201DaD75B24DA5bB6A4483c15cb12C806252"
  ],
  "solcInputHash": "47c3a83c1b5e8d67ccf7ece8b2ac1fe3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_fundsReciever\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nfuse.sol\":\"nfuse\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/nfuse.sol\":{\"content\":\"/*\\r\\n * PG was here\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract nfuse is ERC721URIStorage, Ownable {\\r\\n    uint256 tokenCount;\\r\\n    uint256 mintPrice;\\r\\n    address payable reciever;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address payable _fundsReciever\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        tokenCount = 0;\\r\\n        mintPrice = 100000000000000;\\r\\n        reciever = _fundsReciever;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        reciever.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        string memory _svg,\\r\\n        string memory _name,\\r\\n        string memory _description\\r\\n    ) public payable {\\r\\n        require(msg.sender != address(0), \\\"Cannot mint to the zero address\\\");\\r\\n        require(\\r\\n            msg.value == mintPrice,\\r\\n            \\\"Amount sent does not match mint price\\\"\\r\\n        );\\r\\n        _safeMint(msg.sender, tokenCount);\\r\\n        string memory imageUri = svgToImageUri(_svg);\\r\\n        string memory anotherUri = createTokenUri(\\r\\n            imageUri,\\r\\n            \\\"\\\",\\r\\n            _name,\\r\\n            _description\\r\\n        );\\r\\n        _setTokenURI(tokenCount, anotherUri);\\r\\n        tokenCount += 1;\\r\\n    }\\r\\n\\r\\n    function svgToImageUri(string memory _svg)\\r\\n        private\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseUrl = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64 = Base64.encode(\\r\\n            bytes(string(abi.encodePacked(_svg)))\\r\\n        );\\r\\n\\r\\n        return string(abi.encodePacked(baseUrl, svgBase64));\\r\\n    }\\r\\n\\r\\n    function createTokenUri(\\r\\n        string memory _imageUri,\\r\\n        string memory _externalUri,\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenDescription\\r\\n    ) private pure returns (string memory) {\\r\\n        string memory baseUrl = \\\"data:application/json;base64,\\\";\\r\\n\\r\\n        string memory description = string(\\r\\n            abi.encodePacked('\\\"description\\\": \\\"', _tokenDescription, '\\\",')\\r\\n        );\\r\\n        string memory externalUri = string(\\r\\n            abi.encodePacked('\\\"external_url\\\": \\\"', _externalUri, '\\\",')\\r\\n        );\\r\\n        string memory image = string(\\r\\n            abi.encodePacked('\\\"image\\\": \\\"', _imageUri, '\\\",')\\r\\n        );\\r\\n        string memory name = string(\\r\\n            abi.encodePacked('\\\"name\\\": \\\"', _tokenName, '\\\",')\\r\\n        );\\r\\n        string memory attributes = string(abi.encodePacked('\\\"attributes\\\": []'));\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    baseUrl,\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                \\\"{\\\",\\r\\n                                description,\\r\\n                                externalUri,\\r\\n                                image,\\r\\n                                name,\\r\\n                                attributes,\\r\\n                                \\\"}\\\"\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x509b7e3e2592ff165305cf8934931aa61f71092d9f248f7ef8a1835bd7d32851\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004073380380620040738339818101604052810190620000379190620002f3565b8282816000908051906020019062000051929190620001ba565b5080600190805190602001906200006a929190620001ba565b5050506200008d62000081620000ec60201b60201c565b620000f460201b60201c565b6000600881905550655af3107a400060098190555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000539565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001c89062000444565b90600052602060002090601f016020900481019282620001ec576000855562000238565b82601f106200020757805160ff191683800117855562000238565b8280016001018555821562000238579182015b82811115620002375782518255916020019190600101906200021a565b5b5090506200024791906200024b565b5090565b5b80821115620002665760008160009055506001016200024c565b5090565b6000620002816200027b84620003a4565b6200037b565b9050828152602081018484840111156200029a57600080fd5b620002a78482856200040e565b509392505050565b600081519050620002c0816200051f565b92915050565b600082601f830112620002d857600080fd5b8151620002ea8482602086016200026a565b91505092915050565b6000806000606084860312156200030957600080fd5b600084015167ffffffffffffffff8111156200032457600080fd5b6200033286828701620002c6565b935050602084015167ffffffffffffffff8111156200035057600080fd5b6200035e86828701620002c6565b92505060406200037186828701620002af565b9150509250925092565b6000620003876200039a565b90506200039582826200047a565b919050565b6000604051905090565b600067ffffffffffffffff821115620003c257620003c1620004df565b5b620003cd826200050e565b9050602081019050919050565b6000620003e782620003ee565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200042e57808201518184015260208101905062000411565b838111156200043e576000848401525b50505050565b600060028204905060018216806200045d57607f821691505b60208210811415620004745762000473620004b0565b5b50919050565b62000485826200050e565b810181811067ffffffffffffffff82111715620004a757620004a6620004df565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200052a81620003da565b81146200053657600080fd5b50565b613b2a80620005496000396000f3fe6080604052600436106101095760003560e01c8063715018a611610095578063b88d4fde11610064578063b88d4fde14610355578063c87b56dd1461037e578063d645ddf6146103bb578063e985e9c5146103d7578063f2fde38b1461041457610109565b8063715018a6146102bf5780638da5cb5b146102d657806395d89b4114610301578063a22cb4651461032c57610109565b806323b872dd116100dc57806323b872dd146101dc5780633ccfd60b1461020557806342842e0e1461021c5780636352211e1461024557806370a082311461028257610109565b806301ffc9a71461010e57806306fdde031461014b578063081812fc14610176578063095ea7b3146101b3575b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190612509565b61043d565b6040516101429190612c8b565b60405180910390f35b34801561015757600080fd5b5061016061051f565b60405161016d9190612ca6565b60405180910390f35b34801561018257600080fd5b5061019d600480360381019061019891906125f2565b6105b1565b6040516101aa9190612c24565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d591906124cd565b610636565b005b3480156101e857600080fd5b5061020360048036038101906101fe91906123c7565b61074e565b005b34801561021157600080fd5b5061021a6107ae565b005b34801561022857600080fd5b50610243600480360381019061023e91906123c7565b610895565b005b34801561025157600080fd5b5061026c600480360381019061026791906125f2565b6108b5565b6040516102799190612c24565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190612362565b610967565b6040516102b69190612f48565b60405180910390f35b3480156102cb57600080fd5b506102d4610a1f565b005b3480156102e257600080fd5b506102eb610aa7565b6040516102f89190612c24565b60405180910390f35b34801561030d57600080fd5b50610316610ad1565b6040516103239190612ca6565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e9190612491565b610b63565b005b34801561036157600080fd5b5061037c60048036038101906103779190612416565b610ce4565b005b34801561038a57600080fd5b506103a560048036038101906103a091906125f2565b610d46565b6040516103b29190612ca6565b60405180910390f35b6103d560048036038101906103d0919061255b565b610e98565b005b3480156103e357600080fd5b506103fe60048036038101906103f9919061238b565b610fb1565b60405161040b9190612c8b565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190612362565b611045565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051857506105178261113d565b5b9050919050565b60606000805461052e906131f8565b80601f016020809104026020016040519081016040528092919081815260200182805461055a906131f8565b80156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b5050505050905090565b60006105bc826111a7565b6105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f290612e88565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610641826108b5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990612f08565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106d1611213565b73ffffffffffffffffffffffffffffffffffffffff16148061070057506106ff816106fa611213565b610fb1565b5b61073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690612da8565b60405180910390fd5b610749838361121b565b505050565b61075f610759611213565b826112d4565b61079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590612f28565b60405180910390fd5b6107a98383836113b2565b505050565b6107b6611213565b73ffffffffffffffffffffffffffffffffffffffff166107d4610aa7565b73ffffffffffffffffffffffffffffffffffffffff161461082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190612ea8565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610892573d6000803e3d6000fd5b50565b6108b083838360405180602001604052806000815250610ce4565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612de8565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90612dc8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a27611213565b73ffffffffffffffffffffffffffffffffffffffff16610a45610aa7565b73ffffffffffffffffffffffffffffffffffffffff1614610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290612ea8565b60405180910390fd5b610aa5600061160e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ae0906131f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c906131f8565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b5050505050905090565b610b6b611213565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612d68565b60405180910390fd5b8060056000610be6611213565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610c93611213565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cd89190612c8b565b60405180910390a35050565b610cf5610cef611213565b836112d4565b610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90612f28565b60405180910390fd5b610d40848484846116d4565b50505050565b6060610d51826111a7565b610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790612e68565b60405180910390fd5b6000600660008481526020019081526020016000208054610db0906131f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddc906131f8565b8015610e295780601f10610dfe57610100808354040283529160200191610e29565b820191906000526020600020905b815481529060010190602001808311610e0c57829003601f168201915b505050505090506000610e3a611730565b9050600081511415610e50578192505050610e93565b600082511115610e85578082604051602001610e6d929190612ad6565b60405160208183030381529060405292505050610e93565b610e8e84611747565b925050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eff90612cc8565b60405180910390fd5b6009543414610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4390612e48565b60405180910390fd5b610f58336008546117ee565b6000610f638461180c565b90506000610f828260405180602001604052806000815250868661189f565b9050610f90600854826119ee565b600160086000828254610fa3919061302d565b925050819055505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61104d611213565b73ffffffffffffffffffffffffffffffffffffffff1661106b610aa7565b73ffffffffffffffffffffffffffffffffffffffff16146110c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b890612ea8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112890612d08565b60405180910390fd5b61113a8161160e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661128e836108b5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112df826111a7565b61131e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131590612d88565b60405180910390fd5b6000611329836108b5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061139857508373ffffffffffffffffffffffffffffffffffffffff16611380846105b1565b73ffffffffffffffffffffffffffffffffffffffff16145b806113a957506113a88185610fb1565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113d2826108b5565b73ffffffffffffffffffffffffffffffffffffffff1614611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90612ec8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f90612d48565b60405180910390fd5b6114a3838383611a62565b6114ae60008261121b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fe919061310e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611555919061302d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116df8484846113b2565b6116eb84848484611a67565b61172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172190612ce8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611752826111a7565b611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178890612ee8565b60405180910390fd5b600061179b611730565b905060008151116117bb57604051806020016040528060008152506117e6565b806117c584611bfe565b6040516020016117d6929190612ad6565b6040516020818303038152906040525b915050919050565b611808828260405180602001604052806000815250611dab565b5050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006118728460405160200161185e9190612abf565b604051602081830303815290604052611e06565b90508181604051602001611887929190612ad6565b60405160208183030381529060405292505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525090506000836040516020016118ee9190612b3c565b60405160208183030381529060405290506000866040516020016119129190612b0f565b60405160208183030381529060405290506000886040516020016119369190612bf7565b604051602081830303815290604052905060008760405160200161195a9190612b69565b6040516020818303038152906040529050600060405160200161197c90612afa565b6040516020818303038152906040529050856119be86868686866040516020016119aa959493929190612b96565b604051602081830303815290604052611e06565b6040516020016119cf929190612ad6565b6040516020818303038152906040529650505050505050949350505050565b6119f7826111a7565b611a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2d90612e08565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611a5d929190612186565b505050565b505050565b6000611a888473ffffffffffffffffffffffffffffffffffffffff16611fa5565b15611bf1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ab1611213565b8786866040518563ffffffff1660e01b8152600401611ad39493929190612c3f565b602060405180830381600087803b158015611aed57600080fd5b505af1925050508015611b1e57506040513d601f19601f82011682018060405250810190611b1b9190612532565b60015b611ba1573d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b50600081511415611b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9090612ce8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611bf6565b600190505b949350505050565b60606000821415611c46576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611da6565b600082905060005b60008214611c78578080611c619061325b565b915050600a82611c719190613083565b9150611c4e565b60008167ffffffffffffffff811115611cba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611cec5781602001600182028036833780820191505090505b5090505b60008514611d9f57600182611d05919061310e565b9150600a85611d1491906132a4565b6030611d20919061302d565b60f81b818381518110611d5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611d989190613083565b9450611cf0565b8093505050505b919050565b611db58383611fb8565b611dc26000848484611a67565b611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df890612ce8565b60405180910390fd5b505050565b6060600082511415611e2957604051806020016040528060008152509050611fa0565b6000604051806060016040528060408152602001613ab56040913990506000600360028551611e58919061302d565b611e629190613083565b6004611e6e91906130b4565b90506000602082611e7f919061302d565b67ffffffffffffffff811115611ebe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ef05781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611f5f576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611f04565b600389510660018114611f795760028114611f8957611f94565b613d3d60f01b6002830352611f94565b603d60f81b60018303525b50505050508093505050505b919050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201f90612e28565b60405180910390fd5b612031816111a7565b15612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890612d28565b60405180910390fd5b61207d60008383611a62565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120cd919061302d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612192906131f8565b90600052602060002090601f0160209004810192826121b457600085556121fb565b82601f106121cd57805160ff19168380011785556121fb565b828001600101855582156121fb579182015b828111156121fa5782518255916020019190600101906121df565b5b509050612208919061220c565b5090565b5b8082111561222557600081600090555060010161220d565b5090565b600061223c61223784612f88565b612f63565b90508281526020810184848401111561225457600080fd5b61225f8482856131b6565b509392505050565b600061227a61227584612fb9565b612f63565b90508281526020810184848401111561229257600080fd5b61229d8482856131b6565b509392505050565b6000813590506122b481613a58565b92915050565b6000813590506122c981613a6f565b92915050565b6000813590506122de81613a86565b92915050565b6000815190506122f381613a86565b92915050565b600082601f83011261230a57600080fd5b813561231a848260208601612229565b91505092915050565b600082601f83011261233457600080fd5b8135612344848260208601612267565b91505092915050565b60008135905061235c81613a9d565b92915050565b60006020828403121561237457600080fd5b6000612382848285016122a5565b91505092915050565b6000806040838503121561239e57600080fd5b60006123ac858286016122a5565b92505060206123bd858286016122a5565b9150509250929050565b6000806000606084860312156123dc57600080fd5b60006123ea868287016122a5565b93505060206123fb868287016122a5565b925050604061240c8682870161234d565b9150509250925092565b6000806000806080858703121561242c57600080fd5b600061243a878288016122a5565b945050602061244b878288016122a5565b935050604061245c8782880161234d565b925050606085013567ffffffffffffffff81111561247957600080fd5b612485878288016122f9565b91505092959194509250565b600080604083850312156124a457600080fd5b60006124b2858286016122a5565b92505060206124c3858286016122ba565b9150509250929050565b600080604083850312156124e057600080fd5b60006124ee858286016122a5565b92505060206124ff8582860161234d565b9150509250929050565b60006020828403121561251b57600080fd5b6000612529848285016122cf565b91505092915050565b60006020828403121561254457600080fd5b6000612552848285016122e4565b91505092915050565b60008060006060848603121561257057600080fd5b600084013567ffffffffffffffff81111561258a57600080fd5b61259686828701612323565b935050602084013567ffffffffffffffff8111156125b357600080fd5b6125bf86828701612323565b925050604084013567ffffffffffffffff8111156125dc57600080fd5b6125e886828701612323565b9150509250925092565b60006020828403121561260457600080fd5b60006126128482850161234d565b91505092915050565b61262481613142565b82525050565b61263381613154565b82525050565b600061264482612fea565b61264e8185613000565b935061265e8185602086016131c5565b61266781613391565b840191505092915050565b600061267d82612ff5565b6126878185613011565b93506126978185602086016131c5565b6126a081613391565b840191505092915050565b60006126b682612ff5565b6126c08185613022565b93506126d08185602086016131c5565b80840191505092915050565b60006126e9601f83613011565b91506126f4826133a2565b602082019050919050565b600061270c603283613011565b9150612717826133cb565b604082019050919050565b600061272f602683613011565b915061273a8261341a565b604082019050919050565b6000612752600283613022565b915061275d82613469565b600282019050919050565b6000612775601c83613011565b915061278082613492565b602082019050919050565b6000612798602483613011565b91506127a3826134bb565b604082019050919050565b60006127bb601983613011565b91506127c68261350a565b602082019050919050565b60006127de602c83613011565b91506127e982613533565b604082019050919050565b6000612801601083613022565b915061280c82613582565b601082019050919050565b6000612824601183613022565b915061282f826135ab565b601182019050919050565b6000612847601083613022565b9150612852826135d4565b601082019050919050565b600061286a603883613011565b9150612875826135fd565b604082019050919050565b600061288d602a83613011565b91506128988261364c565b604082019050919050565b60006128b0602983613011565b91506128bb8261369b565b604082019050919050565b60006128d3602e83613011565b91506128de826136ea565b604082019050919050565b60006128f6602083613011565b915061290182613739565b602082019050919050565b6000612919602583613011565b915061292482613762565b604082019050919050565b600061293c600183613022565b9150612947826137b1565b600182019050919050565b600061295f603183613011565b915061296a826137da565b604082019050919050565b6000612982602c83613011565b915061298d82613829565b604082019050919050565b60006129a5600983613022565b91506129b082613878565b600982019050919050565b60006129c8602083613011565b91506129d3826138a1565b602082019050919050565b60006129eb602983613011565b91506129f6826138ca565b604082019050919050565b6000612a0e602f83613011565b9150612a1982613919565b604082019050919050565b6000612a31600183613022565b9150612a3c82613968565b600182019050919050565b6000612a54602183613011565b9150612a5f82613991565b604082019050919050565b6000612a77603183613011565b9150612a82826139e0565b604082019050919050565b6000612a9a600a83613022565b9150612aa582613a2f565b600a82019050919050565b612ab9816131ac565b82525050565b6000612acb82846126ab565b915081905092915050565b6000612ae282856126ab565b9150612aee82846126ab565b91508190509392505050565b6000612b05826127f4565b9150819050919050565b6000612b1a82612817565b9150612b2682846126ab565b9150612b3182612745565b915081905092915050565b6000612b478261283a565b9150612b5382846126ab565b9150612b5e82612745565b915081905092915050565b6000612b7482612998565b9150612b8082846126ab565b9150612b8b82612745565b915081905092915050565b6000612ba182612a24565b9150612bad82886126ab565b9150612bb982876126ab565b9150612bc582866126ab565b9150612bd182856126ab565b9150612bdd82846126ab565b9150612be88261292f565b91508190509695505050505050565b6000612c0282612a8d565b9150612c0e82846126ab565b9150612c1982612745565b915081905092915050565b6000602082019050612c39600083018461261b565b92915050565b6000608082019050612c54600083018761261b565b612c61602083018661261b565b612c6e6040830185612ab0565b8181036060830152612c808184612639565b905095945050505050565b6000602082019050612ca0600083018461262a565b92915050565b60006020820190508181036000830152612cc08184612672565b905092915050565b60006020820190508181036000830152612ce1816126dc565b9050919050565b60006020820190508181036000830152612d01816126ff565b9050919050565b60006020820190508181036000830152612d2181612722565b9050919050565b60006020820190508181036000830152612d4181612768565b9050919050565b60006020820190508181036000830152612d618161278b565b9050919050565b60006020820190508181036000830152612d81816127ae565b9050919050565b60006020820190508181036000830152612da1816127d1565b9050919050565b60006020820190508181036000830152612dc18161285d565b9050919050565b60006020820190508181036000830152612de181612880565b9050919050565b60006020820190508181036000830152612e01816128a3565b9050919050565b60006020820190508181036000830152612e21816128c6565b9050919050565b60006020820190508181036000830152612e41816128e9565b9050919050565b60006020820190508181036000830152612e618161290c565b9050919050565b60006020820190508181036000830152612e8181612952565b9050919050565b60006020820190508181036000830152612ea181612975565b9050919050565b60006020820190508181036000830152612ec1816129bb565b9050919050565b60006020820190508181036000830152612ee1816129de565b9050919050565b60006020820190508181036000830152612f0181612a01565b9050919050565b60006020820190508181036000830152612f2181612a47565b9050919050565b60006020820190508181036000830152612f4181612a6a565b9050919050565b6000602082019050612f5d6000830184612ab0565b92915050565b6000612f6d612f7e565b9050612f79828261322a565b919050565b6000604051905090565b600067ffffffffffffffff821115612fa357612fa2613362565b5b612fac82613391565b9050602081019050919050565b600067ffffffffffffffff821115612fd457612fd3613362565b5b612fdd82613391565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613038826131ac565b9150613043836131ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613078576130776132d5565b5b828201905092915050565b600061308e826131ac565b9150613099836131ac565b9250826130a9576130a8613304565b5b828204905092915050565b60006130bf826131ac565b91506130ca836131ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613103576131026132d5565b5b828202905092915050565b6000613119826131ac565b9150613124836131ac565b925082821015613137576131366132d5565b5b828203905092915050565b600061314d8261318c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156131e35780820151818401526020810190506131c8565b838111156131f2576000848401525b50505050565b6000600282049050600182168061321057607f821691505b6020821081141561322457613223613333565b5b50919050565b61323382613391565b810181811067ffffffffffffffff8211171561325257613251613362565b5b80604052505050565b6000613266826131ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613299576132986132d5565b5b600182019050919050565b60006132af826131ac565b91506132ba836131ac565b9250826132ca576132c9613304565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616e6e6f74206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2261747472696275746573223a205b5d00000000000000000000000000000000600082015250565b7f2265787465726e616c5f75726c223a2022000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202200000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416d6f756e742073656e7420646f6573206e6f74206d61746368206d696e742060008201527f7072696365000000000000000000000000000000000000000000000000000000602082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b613a6181613142565b8114613a6c57600080fd5b50565b613a7881613154565b8114613a8357600080fd5b50565b613a8f81613160565b8114613a9a57600080fd5b50565b613aa6816131ac565b8114613ab157600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a748bef82efa7a6fdc42950dcba07a05a80d2eb4642eb859530820fec374c6be64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c8063715018a611610095578063b88d4fde11610064578063b88d4fde14610355578063c87b56dd1461037e578063d645ddf6146103bb578063e985e9c5146103d7578063f2fde38b1461041457610109565b8063715018a6146102bf5780638da5cb5b146102d657806395d89b4114610301578063a22cb4651461032c57610109565b806323b872dd116100dc57806323b872dd146101dc5780633ccfd60b1461020557806342842e0e1461021c5780636352211e1461024557806370a082311461028257610109565b806301ffc9a71461010e57806306fdde031461014b578063081812fc14610176578063095ea7b3146101b3575b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190612509565b61043d565b6040516101429190612c8b565b60405180910390f35b34801561015757600080fd5b5061016061051f565b60405161016d9190612ca6565b60405180910390f35b34801561018257600080fd5b5061019d600480360381019061019891906125f2565b6105b1565b6040516101aa9190612c24565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d591906124cd565b610636565b005b3480156101e857600080fd5b5061020360048036038101906101fe91906123c7565b61074e565b005b34801561021157600080fd5b5061021a6107ae565b005b34801561022857600080fd5b50610243600480360381019061023e91906123c7565b610895565b005b34801561025157600080fd5b5061026c600480360381019061026791906125f2565b6108b5565b6040516102799190612c24565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190612362565b610967565b6040516102b69190612f48565b60405180910390f35b3480156102cb57600080fd5b506102d4610a1f565b005b3480156102e257600080fd5b506102eb610aa7565b6040516102f89190612c24565b60405180910390f35b34801561030d57600080fd5b50610316610ad1565b6040516103239190612ca6565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e9190612491565b610b63565b005b34801561036157600080fd5b5061037c60048036038101906103779190612416565b610ce4565b005b34801561038a57600080fd5b506103a560048036038101906103a091906125f2565b610d46565b6040516103b29190612ca6565b60405180910390f35b6103d560048036038101906103d0919061255b565b610e98565b005b3480156103e357600080fd5b506103fe60048036038101906103f9919061238b565b610fb1565b60405161040b9190612c8b565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190612362565b611045565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051857506105178261113d565b5b9050919050565b60606000805461052e906131f8565b80601f016020809104026020016040519081016040528092919081815260200182805461055a906131f8565b80156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b5050505050905090565b60006105bc826111a7565b6105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f290612e88565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610641826108b5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990612f08565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106d1611213565b73ffffffffffffffffffffffffffffffffffffffff16148061070057506106ff816106fa611213565b610fb1565b5b61073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690612da8565b60405180910390fd5b610749838361121b565b505050565b61075f610759611213565b826112d4565b61079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590612f28565b60405180910390fd5b6107a98383836113b2565b505050565b6107b6611213565b73ffffffffffffffffffffffffffffffffffffffff166107d4610aa7565b73ffffffffffffffffffffffffffffffffffffffff161461082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190612ea8565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610892573d6000803e3d6000fd5b50565b6108b083838360405180602001604052806000815250610ce4565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612de8565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90612dc8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a27611213565b73ffffffffffffffffffffffffffffffffffffffff16610a45610aa7565b73ffffffffffffffffffffffffffffffffffffffff1614610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290612ea8565b60405180910390fd5b610aa5600061160e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ae0906131f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c906131f8565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b5050505050905090565b610b6b611213565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612d68565b60405180910390fd5b8060056000610be6611213565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610c93611213565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cd89190612c8b565b60405180910390a35050565b610cf5610cef611213565b836112d4565b610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90612f28565b60405180910390fd5b610d40848484846116d4565b50505050565b6060610d51826111a7565b610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790612e68565b60405180910390fd5b6000600660008481526020019081526020016000208054610db0906131f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddc906131f8565b8015610e295780601f10610dfe57610100808354040283529160200191610e29565b820191906000526020600020905b815481529060010190602001808311610e0c57829003601f168201915b505050505090506000610e3a611730565b9050600081511415610e50578192505050610e93565b600082511115610e85578082604051602001610e6d929190612ad6565b60405160208183030381529060405292505050610e93565b610e8e84611747565b925050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eff90612cc8565b60405180910390fd5b6009543414610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4390612e48565b60405180910390fd5b610f58336008546117ee565b6000610f638461180c565b90506000610f828260405180602001604052806000815250868661189f565b9050610f90600854826119ee565b600160086000828254610fa3919061302d565b925050819055505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61104d611213565b73ffffffffffffffffffffffffffffffffffffffff1661106b610aa7565b73ffffffffffffffffffffffffffffffffffffffff16146110c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b890612ea8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112890612d08565b60405180910390fd5b61113a8161160e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661128e836108b5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112df826111a7565b61131e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131590612d88565b60405180910390fd5b6000611329836108b5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061139857508373ffffffffffffffffffffffffffffffffffffffff16611380846105b1565b73ffffffffffffffffffffffffffffffffffffffff16145b806113a957506113a88185610fb1565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113d2826108b5565b73ffffffffffffffffffffffffffffffffffffffff1614611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90612ec8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f90612d48565b60405180910390fd5b6114a3838383611a62565b6114ae60008261121b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fe919061310e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611555919061302d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116df8484846113b2565b6116eb84848484611a67565b61172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172190612ce8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611752826111a7565b611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178890612ee8565b60405180910390fd5b600061179b611730565b905060008151116117bb57604051806020016040528060008152506117e6565b806117c584611bfe565b6040516020016117d6929190612ad6565b6040516020818303038152906040525b915050919050565b611808828260405180602001604052806000815250611dab565b5050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006118728460405160200161185e9190612abf565b604051602081830303815290604052611e06565b90508181604051602001611887929190612ad6565b60405160208183030381529060405292505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525090506000836040516020016118ee9190612b3c565b60405160208183030381529060405290506000866040516020016119129190612b0f565b60405160208183030381529060405290506000886040516020016119369190612bf7565b604051602081830303815290604052905060008760405160200161195a9190612b69565b6040516020818303038152906040529050600060405160200161197c90612afa565b6040516020818303038152906040529050856119be86868686866040516020016119aa959493929190612b96565b604051602081830303815290604052611e06565b6040516020016119cf929190612ad6565b6040516020818303038152906040529650505050505050949350505050565b6119f7826111a7565b611a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2d90612e08565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611a5d929190612186565b505050565b505050565b6000611a888473ffffffffffffffffffffffffffffffffffffffff16611fa5565b15611bf1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ab1611213565b8786866040518563ffffffff1660e01b8152600401611ad39493929190612c3f565b602060405180830381600087803b158015611aed57600080fd5b505af1925050508015611b1e57506040513d601f19601f82011682018060405250810190611b1b9190612532565b60015b611ba1573d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b50600081511415611b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9090612ce8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611bf6565b600190505b949350505050565b60606000821415611c46576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611da6565b600082905060005b60008214611c78578080611c619061325b565b915050600a82611c719190613083565b9150611c4e565b60008167ffffffffffffffff811115611cba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611cec5781602001600182028036833780820191505090505b5090505b60008514611d9f57600182611d05919061310e565b9150600a85611d1491906132a4565b6030611d20919061302d565b60f81b818381518110611d5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611d989190613083565b9450611cf0565b8093505050505b919050565b611db58383611fb8565b611dc26000848484611a67565b611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df890612ce8565b60405180910390fd5b505050565b6060600082511415611e2957604051806020016040528060008152509050611fa0565b6000604051806060016040528060408152602001613ab56040913990506000600360028551611e58919061302d565b611e629190613083565b6004611e6e91906130b4565b90506000602082611e7f919061302d565b67ffffffffffffffff811115611ebe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ef05781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611f5f576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611f04565b600389510660018114611f795760028114611f8957611f94565b613d3d60f01b6002830352611f94565b603d60f81b60018303525b50505050508093505050505b919050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201f90612e28565b60405180910390fd5b612031816111a7565b15612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890612d28565b60405180910390fd5b61207d60008383611a62565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120cd919061302d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612192906131f8565b90600052602060002090601f0160209004810192826121b457600085556121fb565b82601f106121cd57805160ff19168380011785556121fb565b828001600101855582156121fb579182015b828111156121fa5782518255916020019190600101906121df565b5b509050612208919061220c565b5090565b5b8082111561222557600081600090555060010161220d565b5090565b600061223c61223784612f88565b612f63565b90508281526020810184848401111561225457600080fd5b61225f8482856131b6565b509392505050565b600061227a61227584612fb9565b612f63565b90508281526020810184848401111561229257600080fd5b61229d8482856131b6565b509392505050565b6000813590506122b481613a58565b92915050565b6000813590506122c981613a6f565b92915050565b6000813590506122de81613a86565b92915050565b6000815190506122f381613a86565b92915050565b600082601f83011261230a57600080fd5b813561231a848260208601612229565b91505092915050565b600082601f83011261233457600080fd5b8135612344848260208601612267565b91505092915050565b60008135905061235c81613a9d565b92915050565b60006020828403121561237457600080fd5b6000612382848285016122a5565b91505092915050565b6000806040838503121561239e57600080fd5b60006123ac858286016122a5565b92505060206123bd858286016122a5565b9150509250929050565b6000806000606084860312156123dc57600080fd5b60006123ea868287016122a5565b93505060206123fb868287016122a5565b925050604061240c8682870161234d565b9150509250925092565b6000806000806080858703121561242c57600080fd5b600061243a878288016122a5565b945050602061244b878288016122a5565b935050604061245c8782880161234d565b925050606085013567ffffffffffffffff81111561247957600080fd5b612485878288016122f9565b91505092959194509250565b600080604083850312156124a457600080fd5b60006124b2858286016122a5565b92505060206124c3858286016122ba565b9150509250929050565b600080604083850312156124e057600080fd5b60006124ee858286016122a5565b92505060206124ff8582860161234d565b9150509250929050565b60006020828403121561251b57600080fd5b6000612529848285016122cf565b91505092915050565b60006020828403121561254457600080fd5b6000612552848285016122e4565b91505092915050565b60008060006060848603121561257057600080fd5b600084013567ffffffffffffffff81111561258a57600080fd5b61259686828701612323565b935050602084013567ffffffffffffffff8111156125b357600080fd5b6125bf86828701612323565b925050604084013567ffffffffffffffff8111156125dc57600080fd5b6125e886828701612323565b9150509250925092565b60006020828403121561260457600080fd5b60006126128482850161234d565b91505092915050565b61262481613142565b82525050565b61263381613154565b82525050565b600061264482612fea565b61264e8185613000565b935061265e8185602086016131c5565b61266781613391565b840191505092915050565b600061267d82612ff5565b6126878185613011565b93506126978185602086016131c5565b6126a081613391565b840191505092915050565b60006126b682612ff5565b6126c08185613022565b93506126d08185602086016131c5565b80840191505092915050565b60006126e9601f83613011565b91506126f4826133a2565b602082019050919050565b600061270c603283613011565b9150612717826133cb565b604082019050919050565b600061272f602683613011565b915061273a8261341a565b604082019050919050565b6000612752600283613022565b915061275d82613469565b600282019050919050565b6000612775601c83613011565b915061278082613492565b602082019050919050565b6000612798602483613011565b91506127a3826134bb565b604082019050919050565b60006127bb601983613011565b91506127c68261350a565b602082019050919050565b60006127de602c83613011565b91506127e982613533565b604082019050919050565b6000612801601083613022565b915061280c82613582565b601082019050919050565b6000612824601183613022565b915061282f826135ab565b601182019050919050565b6000612847601083613022565b9150612852826135d4565b601082019050919050565b600061286a603883613011565b9150612875826135fd565b604082019050919050565b600061288d602a83613011565b91506128988261364c565b604082019050919050565b60006128b0602983613011565b91506128bb8261369b565b604082019050919050565b60006128d3602e83613011565b91506128de826136ea565b604082019050919050565b60006128f6602083613011565b915061290182613739565b602082019050919050565b6000612919602583613011565b915061292482613762565b604082019050919050565b600061293c600183613022565b9150612947826137b1565b600182019050919050565b600061295f603183613011565b915061296a826137da565b604082019050919050565b6000612982602c83613011565b915061298d82613829565b604082019050919050565b60006129a5600983613022565b91506129b082613878565b600982019050919050565b60006129c8602083613011565b91506129d3826138a1565b602082019050919050565b60006129eb602983613011565b91506129f6826138ca565b604082019050919050565b6000612a0e602f83613011565b9150612a1982613919565b604082019050919050565b6000612a31600183613022565b9150612a3c82613968565b600182019050919050565b6000612a54602183613011565b9150612a5f82613991565b604082019050919050565b6000612a77603183613011565b9150612a82826139e0565b604082019050919050565b6000612a9a600a83613022565b9150612aa582613a2f565b600a82019050919050565b612ab9816131ac565b82525050565b6000612acb82846126ab565b915081905092915050565b6000612ae282856126ab565b9150612aee82846126ab565b91508190509392505050565b6000612b05826127f4565b9150819050919050565b6000612b1a82612817565b9150612b2682846126ab565b9150612b3182612745565b915081905092915050565b6000612b478261283a565b9150612b5382846126ab565b9150612b5e82612745565b915081905092915050565b6000612b7482612998565b9150612b8082846126ab565b9150612b8b82612745565b915081905092915050565b6000612ba182612a24565b9150612bad82886126ab565b9150612bb982876126ab565b9150612bc582866126ab565b9150612bd182856126ab565b9150612bdd82846126ab565b9150612be88261292f565b91508190509695505050505050565b6000612c0282612a8d565b9150612c0e82846126ab565b9150612c1982612745565b915081905092915050565b6000602082019050612c39600083018461261b565b92915050565b6000608082019050612c54600083018761261b565b612c61602083018661261b565b612c6e6040830185612ab0565b8181036060830152612c808184612639565b905095945050505050565b6000602082019050612ca0600083018461262a565b92915050565b60006020820190508181036000830152612cc08184612672565b905092915050565b60006020820190508181036000830152612ce1816126dc565b9050919050565b60006020820190508181036000830152612d01816126ff565b9050919050565b60006020820190508181036000830152612d2181612722565b9050919050565b60006020820190508181036000830152612d4181612768565b9050919050565b60006020820190508181036000830152612d618161278b565b9050919050565b60006020820190508181036000830152612d81816127ae565b9050919050565b60006020820190508181036000830152612da1816127d1565b9050919050565b60006020820190508181036000830152612dc18161285d565b9050919050565b60006020820190508181036000830152612de181612880565b9050919050565b60006020820190508181036000830152612e01816128a3565b9050919050565b60006020820190508181036000830152612e21816128c6565b9050919050565b60006020820190508181036000830152612e41816128e9565b9050919050565b60006020820190508181036000830152612e618161290c565b9050919050565b60006020820190508181036000830152612e8181612952565b9050919050565b60006020820190508181036000830152612ea181612975565b9050919050565b60006020820190508181036000830152612ec1816129bb565b9050919050565b60006020820190508181036000830152612ee1816129de565b9050919050565b60006020820190508181036000830152612f0181612a01565b9050919050565b60006020820190508181036000830152612f2181612a47565b9050919050565b60006020820190508181036000830152612f4181612a6a565b9050919050565b6000602082019050612f5d6000830184612ab0565b92915050565b6000612f6d612f7e565b9050612f79828261322a565b919050565b6000604051905090565b600067ffffffffffffffff821115612fa357612fa2613362565b5b612fac82613391565b9050602081019050919050565b600067ffffffffffffffff821115612fd457612fd3613362565b5b612fdd82613391565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613038826131ac565b9150613043836131ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613078576130776132d5565b5b828201905092915050565b600061308e826131ac565b9150613099836131ac565b9250826130a9576130a8613304565b5b828204905092915050565b60006130bf826131ac565b91506130ca836131ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613103576131026132d5565b5b828202905092915050565b6000613119826131ac565b9150613124836131ac565b925082821015613137576131366132d5565b5b828203905092915050565b600061314d8261318c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156131e35780820151818401526020810190506131c8565b838111156131f2576000848401525b50505050565b6000600282049050600182168061321057607f821691505b6020821081141561322457613223613333565b5b50919050565b61323382613391565b810181811067ffffffffffffffff8211171561325257613251613362565b5b80604052505050565b6000613266826131ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613299576132986132d5565b5b600182019050919050565b60006132af826131ac565b91506132ba836131ac565b9250826132ca576132c9613304565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616e6e6f74206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2261747472696275746573223a205b5d00000000000000000000000000000000600082015250565b7f2265787465726e616c5f75726c223a2022000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202200000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416d6f756e742073656e7420646f6573206e6f74206d61746368206d696e742060008201527f7072696365000000000000000000000000000000000000000000000000000000602082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b613a6181613142565b8114613a6c57600080fd5b50565b613a7881613154565b8114613a8357600080fd5b50565b613a8f81613160565b8114613a9a57600080fd5b50565b613aa6816131ac565b8114613ab157600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a748bef82efa7a6fdc42950dcba07a05a80d2eb4642eb859530820fec374c6be64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1066,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1892,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "tokenCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1894,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "mintPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1896,
        "contract": "contracts/nfuse.sol:nfuse",
        "label": "reciever",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}